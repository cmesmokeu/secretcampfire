function FeedRenderer(cfg) {
  if (!cfg.uris || cfg.uris.length == 0)
    return;

  this.selector = cfg.selector;
  this.selectorButton = cfg.selector+"-button";
  this.templateSelector = this.selector + "-template";

  this.mdConverter = new showdown.Converter();

  this.initFeeds(cfg.uris);
  this.initMasonry();  
  this.initInfiniteScroll();
}

FeedRenderer.prototype.initFeeds = function(uris) {
  // uniquify
  uris = [...new Set(uris)];

  // make 'feed' objects to store book-keeping
  this.feeds = [];
  this.uriRoot2FeedIdx = {}; 
  for (var i=0; i < uris.length; i++)
  {
    var rootAndIdx = this.getFeedRootAndPageIdx(uris[i]);

    this.feeds.push({
      'uri': uris[i],
      'root': rootAndIdx[0],
      'start_offset': rootAndIdx[1],
      'has_more': true
    });

    this.uriRoot2FeedIdx[rootAndIdx[0]] = i;
  }
}

FeedRenderer.prototype.initMasonry = function() {
  this.msnryContainer = $(this.selector).masonry({
    itemSelector: '.grid-item',
    columnWidth: '.grid-sizer',
    percentPosition: true
  });

  // get Masonry instance
  this.msnry = this.msnryContainer.data('masonry');
}

FeedRenderer.prototype.initInfiniteScroll = function() {
  var fr = this;

  this.infCardIdCounter = 0;
  this.infScrollContainer = this.msnryContainer.infiniteScroll({
    path: function() {
      if (!fr.feedsHaveMore())
        return; // returning nothing disables further loads

      var pageIndex = this.pageIndex - 1; // -1 to make it 0-indexed
      var feedIdx = pageIndex % fr.feeds.length;
      var root = fr.feeds[feedIdx].root;
      var offset = fr.feeds[feedIdx].start_offset
        + parseInt(pageIndex / fr.feeds.length);

      return root + "/" + offset;
    },
    responseType: 'text',
		button: this.selectorButton,
    outlayer: this.msnry,
    history: false
  });
  this.infscroll = this.infScrollContainer.data('infiniteScroll');

  // https://infinite-scroll.com/extras.html#loading-json
  this.infScrollContainer.on('load.infiniteScroll', function(ev, response, path) {
    var rootPath = fr.getFeedRootAndPageIdx(path)[0];
    var feedIdx = fr.uriRoot2FeedIdx[rootPath];
    var data = JSON.parse(response);

    if (!data.posts || !data.posts.length)
    {
      // nothing more for this feed
      fr.feeds[feedIdx].has_more = false;

      // hide 'more' button if all feeds are done
      if (!fr.feedsHaveMore())
        $(fr.selectorButton).hide();

      return;
    }
    else
      $(fr.selectorButton).fadeIn();

    var newCards = $();
    for (var i=0; i < data.posts.length; i++)
    {
      var post = data.posts[i];

      var newCard = $(fr.templateSelector + " > div").clone();
      newCard.attr('id', "card-"+(fr.infCardIdCounter++));
      newCard.find("img")
        .attr('src', post.thumbs[0])
        .data('iscroll-id', newCard.attr('id'));
      if (post.urls.length)
      {
        newCard.find(".card-img-top-link").attr("href", post.urls[0]);
        newCard.find(".card-title-link").attr("href", post.urls[0]);
      }
      if (post.thumbs.length)
        newCard.find("img").attr('src', post.thumbs[0]);
      else
        newCard.find("img").hide();
      newCard.find(".card-title").html(post.title);
      var markdown = fr.mdConverter.makeHtml(post.text);
      newCard.find(".card-text").html(markdown);
      newCards = newCards.add(newCard);
      fr.msnryContainer.append(newCard);
    }

    newCards.imagesLoaded().progress(function(instance, image) {
      var id = $(image.img).data('iscroll-id');
      fr.msnryContainer.masonry('appended', $("#"+id));
    });
  });

  // load initial page
  this.infScrollContainer.infiniteScroll('loadNextPage');
}

FeedRenderer.prototype.getFeedRootAndPageIdx = function(uri) {
  var root = uri;
  var idx = 0;

  var arr = uri.match(/(.+)\/([^/]+)/);
  if (arr != null)
  {
    root = arr[1];
    idx = parseInt(arr[2]);
  }

  return [root, idx];
}

FeedRenderer.prototype.feedsHaveMore = function() {
  var hasMore = false;
  for (var fi=0; fi < this.feeds.length; fi++)
    if (this.feeds[fi].has_more)
    {
      hasMore = true;
      break;
    }

  return hasMore;
}
