function RenderFeed(cfg) {
  this.selector = cfg.selector;
  this.selectorButton = cfg.selector+"-button";
  this.templateSelector = this.selector + "-template";
  this.onNoPosts = cfg.onNoPosts;

  if (!cfg.uris || cfg.uris.length == 0)
  {
    if (this.onNoPosts)
      this.onNoPosts();
    return;
  }

  this._mdConverter = new showdown.Converter();
  this._numPostsFetched = 0;

  this.initFeeds(cfg.uris);
  this.initMasonry();  
  this.initInfiniteScroll();
}

RenderFeed.prototype.initFeeds = function(uris) {
  // uniquify
  uris = [...new Set(uris)];

  // make 'feed' objects to store book-keeping
  this.feeds = [];
  this.uriRoot2FeedIdx = {}; 
  for (var i=0; i < uris.length; i++)
  {
    var rootAndIdx = this.getFeedRootAndPageIdx(uris[i]);

    this.feeds.push({
      'uri': uris[i],
      'root': rootAndIdx[0],
      'start_offset': rootAndIdx[1],
      'has_more': true
    });

    this.uriRoot2FeedIdx[rootAndIdx[0]] = i;
  }
}

RenderFeed.prototype.initMasonry = function() {
  this.msnryContainer = $(this.selector).masonry({
    itemSelector: '.grid-item',
    columnWidth: '.grid-sizer',
    percentPosition: true
  });

  // get Masonry instance
  this.msnry = this.msnryContainer.data('masonry');
}

RenderFeed.prototype.initInfiniteScroll = function() {
  var fr = this;

  this.infCardIdCounter = 0;
  this.infScrollContainer = this.msnryContainer.infiniteScroll({
    path: function() {
      if (!fr.feedsHaveMore())
        return; // returning nothing disables further loads

      var pageIndex = this.pageIndex - 1; // -1 to make it 0-indexed
      var feedIdx = pageIndex % fr.feeds.length;
      var root = fr.feeds[feedIdx].root;
      var offset = fr.feeds[feedIdx].start_offset
        + parseInt(pageIndex / fr.feeds.length);
      offset *= <%= NUM_POSTS_PER_FETCH %>;

      return root + "/" + offset;
    },
    responseType: 'text',
		button: this.selectorButton,
    outlayer: this.msnry,
    history: false
  });
  this.infscroll = this.infScrollContainer.data('infiniteScroll');

  // https://infinite-scroll.com/extras.html#loading-json
  this.infScrollContainer.on('load.infiniteScroll', function(ev, response, path) {
    var data = null;
    var feedIdx = 0;

    if (path)
    {
      var rootPath = fr.getFeedRootAndPageIdx(path)[0];
      feedIdx = fr.uriRoot2FeedIdx[rootPath];
      data = JSON.parse(response);
      if (data.posts)
        fr._numPostsFetched += data.posts.length;
    }

    if (!data || !data.posts || !data.posts.length)
    {
      // nothing more for this feed
      fr.feeds[feedIdx].has_more = false;

      // hide 'more' button if all feeds are done
      if (!fr.feedsHaveMore())
        fr.allFeedsDone();

      return;
    }
    else
      $(fr.selectorButton).fadeIn();

    var urlObj = new URL(rootPath);
    var postUrlBase = urlObj.protocol + "//" + urlObj.host;
    if (data.blog_url)
      postUrlBase = data.blog_url;

    var newCards = $();
    for (var i=0; i < data.posts.length; i++)
    {
      var post = data.posts[i];
      var postRenderUrl = postUrlBase + "/render/" 
        + encodeURIComponent(postUrlBase + post.post_url);

      var newCard = $(fr.templateSelector + " > div").clone();
      newCard.attr('id', "card-"+(fr.infCardIdCounter++));
      newCard.find("img").data('iscroll-id', newCard.attr('id'));
      newCard.find(".card-img-fold-link").attr("href", postRenderUrl);
      if (post.urls.length)
      {
        newCard.find(".card-img-top-link").attr("href", post.urls[0]);
        newCard.find(".card-title-link").attr("href", post.urls[0]);
      }
      if (post.thumbs.length)
        newCard.find(".card-img-top").attr('src', post.thumbs[0]).show();
      else
        newCard.find(".card-img-top").hide();
      newCard.find(".card-author-link").attr('href', postUrlBase);
      if (data.avatar_url)
        newCard.find(".card-author-avatar").css('background-image', 
          'url(' + data.avatar_url + ')');
      newCard.find(".card-author-post-link").attr('href', postRenderUrl);
      newCard.find(".card-author").html(urlObj.host);
      newCard.find(".card-title").html(post.title);
      var markdown = fr._mdConverter.makeHtml(post.text);
      newCard.find(".card-text").html(markdown);
      newCards = newCards.add(newCard);
      fr.msnryContainer.append(newCard);
    }

    newCards.imagesLoaded().progress(function(instance, image) {
      var id = $(image.img).data('iscroll-id');
      fr.msnryContainer.masonry('appended', $("#"+id));
    });
  });

  // load initial page
  this.infScrollContainer.infiniteScroll('loadNextPage');
}

RenderFeed.prototype.getFeedRootAndPageIdx = function(uri) {
  var root = uri;
  var idx = 0;

  var arr = uri.match(/(.+)\/(\d+)$/);
  if (arr != null)
  {
    root = arr[1];
    idx = parseInt(arr[2]);
  }

  return [root, idx];
}

RenderFeed.prototype.feedsHaveMore = function() {
  var hasMore = false;
  for (var fi=0; fi < this.feeds.length; fi++)
    if (this.feeds[fi].has_more)
    {
      hasMore = true;
      break;
    }

  return hasMore;
}

RenderFeed.prototype.allFeedsDone = function() {
  $(this.selectorButton).hide();
  
  if (this._numPostsFetched == 0 && this.onNoPosts)
    this.onNoPosts();
}
