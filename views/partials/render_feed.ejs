function FeedRenderer(cfg) {
  this.uris = cfg.uris;
  if (!this.uris || this.uris.length == 0)
    return;

  this.selector = cfg.selector;
  this.selectorButton = cfg.selector+"-button";
  this.templateSelector = this.selector + "-template";

  this.mdConverter = new showdown.Converter();

  var fr = this;

  /* 
   * init Masonry
   */
  var $grid = $(this.selector).masonry({
    itemSelector: '.grid-item',
    columnWidth: '.grid-sizer',
    percentPosition: true
  });
  // get Masonry instance
  this.msnry = $grid.data('masonry');

  /* 
   * init Infinite Scroll 
   */
  this.feedPathOffsets = []; // (feedRPath, offset)
  this.feedHasMore = [];
  for (var i=0; i < this.uris.length; i++)
  {
    var uri = this.uris[i];
    this.feedPathOffsets.push([
      this.getCurrPageIdx(uri)[0], // root path
      this.getCurrPageIdx(uri)[1]  // start offset
    ]);
    this.feedHasMore.push(true);
  }

  this.infCardIdCounter = 0;
  this.infScrollContainer = $grid.infiniteScroll({
    path: function() {
      if (!fr.feedsHaveMore())
        return; // returning nothing disables further loads

      var feedIdx = fr.getCurrFeedIdx();
      var root = fr.feedPathOffsets[feedIdx][0];
      var offset = fr.feedPathOffsets[feedIdx][1]
        + ((this.pageIndex-1) / fr.uris.length);

      return root + "/" + offset;
    },
    responseType: 'text',
		button: this.selectorButton,
    outlayer: this.msnry,
    history: false
  });
  this.infscroll = this.infScrollContainer.data('infiniteScroll');

  // https://infinite-scroll.com/extras.html#loading-json
  this.infScrollContainer.on('load.infiniteScroll', function(ev, response) {
		//console.log(response);
    var data = JSON.parse(response);

    if (!data.posts || !data.posts.length)
    {
      // nothing more for this feed
      var feedIdx = fr.getCurrFeedIdx();
      fr.feedHasMore[feedIdx] = false;

      // hide 'more' button if all feeds are done
      if (!fr.feedsHaveMore())
        $(fr.selectorButton).hide();

      return;
    }
    else
      $(fr.selectorButton).fadeIn();

    var newCards = $();
    for (var i=0; i < data.posts.length; i++)
    {
      var post = data.posts[i];

      var newCard = $(fr.templateSelector + " > div").clone();
      newCard.attr('id', "card-"+(fr.infCardIdCounter++));
      newCard.find("img")
        .attr('src', post.thumbs[0])
        .data('iscroll-id', newCard.attr('id'));
      if (post.urls.length)
      {
        newCard.find(".card-img-top-link").attr("href", post.urls[0]);
        newCard.find(".card-title-link").attr("href", post.urls[0]);
      }
      if (post.thumbs.length)
        newCard.find("img").attr('src', post.thumbs[0]);
      else
        newCard.find("img").hide();
      newCard.find(".card-title").html(post.title);
      var markdown = fr.mdConverter.makeHtml(post.text);
      newCard.find(".card-text").html(markdown);
      newCards = newCards.add(newCard);
      $grid.append(newCard);
    }

    newCards.imagesLoaded().progress(function(instance, image) {
      var id = $(image.img).data('iscroll-id');
      $grid.masonry('appended', $("#"+id));
    });
  });

  // load initial page
  this.infScrollContainer.infiniteScroll('loadNextPage');
}

FeedRenderer.prototype.getCurrFeedIdx = function() {
  if (!this.infscroll)
  {
    // not initialized yet, default to feed 0
    return 0;
  }

  var pageIndex = this.infscroll.pageIndex - 1; 
    // -1 because infscroll is 0-indexed
  return pageIndex % this.uris.length;
}

FeedRenderer.prototype.getCurrPageIdx = function(uri) {
  var root = uri;
  var idx = 0;

  var arr = uri.match(/(.+feed)\/(.+)/);
  if (arr != null)
  {
    root = arr[1];
    idx = parseInt(arr[2]);
  }

  return [root, idx];
}

FeedRenderer.prototype.feedsHaveMore = function() {
  var hasMore = false;
  for (var fi=0; fi < this.uris.length; fi++)
    if (this.feedHasMore[fi])
    {
      hasMore = true;
      break;
    }

  return hasMore;
}
